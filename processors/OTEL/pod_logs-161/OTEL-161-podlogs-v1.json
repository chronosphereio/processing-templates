{"name":"OTEL-161-podlogs-v1","config":{"Name":"lua","match":"*","code":"cb_filter=require('calyptia.pr')([====================[[{\"type\":\"json_decode\",\"opts\":{\"src\":\"log\",\"dst\":\"decoded_json\"},\"comment\":\"\",\"id\":\"132af652-57d5-4949-a7aa-7d3b374fa27f\",\"active\":true},{\"type\":\"delete\",\"opts\":{\"key\":\"log\"},\"comment\":\"\",\"id\":\"ac3ef953-8faf-4e84-9378-610752841be4\",\"active\":true},{\"type\":\"flatten\",\"opts\":{\"key\":\"decoded_json\",\"regex\":\"^.+$\",\"keyReplacement\":\"%1\",\"keepOrig\":false},\"comment\":\"\",\"id\":\"17785c16-e04f-4914-b48c-d2f7a9248e92\",\"active\":true},{\"type\":\"custom_script\",\"opts\":{\"script\":\"-- Define a function that checks if a value is empty, \\\"\\\", n/a, or null\\nlocal function is_empty(v)\\n  return v == nil or v == \\\"\\\" or v == \\\"n/a\\\" or v == \\\"null\\\" or v == \\\"SEVERITY_NUMBER_UNSPECIFIED\\\"\\nend\\n\\n-- Define a function that recursively removes empty keys from a subrecord\\nlocal function remove_empty_keys(subrecord)\\n  for k, v in pairs(subrecord) do\\n    -- Check if the value is empty using the 'is_empty' function\\n    if is_empty(v) then\\n      -- If the value is empty, delete the key\\n      subrecord[k] = nil\\n    elseif type(v) == 'table' then\\n      -- If the value is a table, recursively call the 'remove_empty_keys' function\\n      remove_empty_keys(v)\\n    end\\n  end\\nend\\n\\nreturn function(tag, ts, record)\\n  -- Check if the record has a 'scopeLog' field\\n  if record['scopeLog'] ~= nil then\\n    -- Call the 'remove_empty_keys' function on the 'scopeLog' subrecord\\n    remove_empty_keys(record['scopeLog'])\\n  end\\n  return 1, ts, record\\nend\"},\"comment\":\"recurse through all subrecords of the scopeLog field and remove keys where the value is empty, \\\"\\\", n/a, or null\",\"id\":\"3ce39e13-31e8-4c27-84da-ded9f4e6106b\",\"active\":true},{\"type\":\"custom_script\",\"opts\":{\"script\":\"-- Define a function that recursively removes empty keys from a subrecord\\nlocal function remove_empty_keys(subrecord)\\n  for k, v in pairs(subrecord) do\\n    -- Check if the value is empty using the 'is_empty' function\\n    if k == \\\"droppedAttributesCount\\\" and v == 0 then\\n      -- If the value is empty, delete the key\\n      subrecord[k] = nil\\n    elseif type(v) == 'table' then\\n      -- If the value is a table, recursively call the 'remove_empty_keys' function\\n      remove_empty_keys(v)\\n    end\\n  end\\nend\\n\\nreturn function(tag, ts, record)\\n  -- Check if the record has a 'scopeLog' field\\n  if record['scopeLog'] ~= nil then\\n    -- Call the 'remove_empty_keys' function on the 'scopeLog' subrecord\\n    remove_empty_keys(record['scopeLog'])\\n  end\\n  if record['resource'] ~= nil then\\n    -- Call the 'remove_empty_keys' function on the 'resource' subrecord\\n    remove_empty_keys(record['resource'])\\n  end\\n  return 1, ts, record\\nend\"},\"comment\":\"check the droppedAttributesCount key in scopeLog and resource objects, if the value is 0 then set delete the key\",\"id\":\"a10c05a1-d57d-4205-8673-2163ff45e96a\",\"active\":true},{\"type\":\"custom_script\",\"opts\":{\"script\":\"return function(tag, ts, record)\\n    -- check if the record has the key 'scopeLog'\\n    if record['scopeLog'] ~= nil then\\n        -- check if the 'scopeLog' key has the key 'scope'\\n        if record['scopeLog']['scope'] ~= nil then\\n            -- check if the 'scope' key has the key 'attributes'\\n            if record['scopeLog']['scope']['attributes'] ~= nil then\\n                -- check if the 'attributes' key has any sub records\\n                if next(record['scopeLog']['scope']['attributes']) == nil then\\n                    -- delete the key\\n                    record['scopeLog']['scope']['attributes'] = nil\\n                end\\n            end\\n        end\\n    end\\n    return 1, ts, record\\nend\"},\"comment\":\"check if scopeLog.scope.attributes contains any sub records, if not, delete the key\",\"id\":\"7b2e74b5-0870-4efb-a9e4-eb6428c0ddc0\",\"active\":true},{\"type\":\"custom_script\",\"opts\":{\"script\":\"return function(tag, ts, record)\\n    -- check if the record has the key 'scopeLog'\\n    if record['scopeLog'] ~= nil then\\n        -- check if the 'scopeLog' key has the key 'scope'\\n        if record['scopeLog']['scope'] ~= nil then\\n            if next(record['scopeLog']['scope']) == nil then\\n                    -- delete the key\\n                record['scopeLog']['scope'] = nil\\n            end\\n        end\\n    end\\n    return 1, ts, record\\nend\"},\"comment\":\"check if scopeLog.scope contains any sub records, if not, delete the key\",\"id\":\"af944b2e-de7f-462b-8533-9a3ebf8b093d\",\"active\":true}]]====================])","call":"cb_filter"},"input":"{\"schemaUrl\":\"https://opentelemetry.io/schemas/1.6.1\",\"resource\":{\"attributes\":{\"k8s.namespace.name\":\"ic\",\"k8s.pod.name\":\"dev-app-api-abcd12345-12345\",\"com.splunk.sourcetype\":\"kube:container:app-service\",\"com.splunk.source\":\"/var/log/pods/dev-app-api-abcd12345-efghi_jkl6789-1234-1234-1234-abcd12345/linkerd-proxy/0.log\",\"k8s.pod.uid\":\"a9ff616f-3917-4960-8c5e-6c9a7e3d63df\",\"k8s.container.restart_count\":\"0\",\"k8s.container.name\":\"app-service\",\"k8s.node.name\":\"ip-127-0-0-1\",\"k8s.pod.labels.app\":\"dev-app-api\",\"container.image.name\":\"ab.c5a.io/app/service\",\"container.image.tag\":\"stable-1.0.0\",\"container.id\":\"6b475df40f024e12b92f5a3e2f3f2b816b475df40f024e12b92f5a3e2f3f2b81\",\"host.name\":\"ip-127-0-0-1\",\"os.type\":\"linux\",\"k8s.cluster.name\":\"dev1\",\"deployment.environment\":\"production\"},\"droppedAttributesCount\":0},\"scopeLog\":{\"schemaUrl\":\"\",\"scope\":{\"name\":\"\",\"version\":\"\",\"droppedAttributesCount\":0,\"attributes\":{}},\"logRecord\":{\"spanId\":\"\",\"traceId\":\"\",\"severityText\":\"\",\"severityNumber\":\"SEVERITY_NUMBER_UNSPECIFIED\",\"flags\":0,\"droppedAttributesCount\":0,\"body\":\"[  3097.455065s]  INFO ThreadId(01) outbound: app_core::serve: Connection closed error=connect timed out after 10s client.addr=127.0.0.1:5591 server.addr=127.0.0.254:1102\",\"attributes\":{\"log.iostream\":\"stdout\",\"logtag\":\"F\"},\"observedTimeUnix\":{\"millis\":1722348201345,\"nanos\":142841},\"timeUnix\":{\"millis\":1722348201344,\"nanos\":979881}}}}","isRawInput":false,"pipelineVersion":"24.7.3"}